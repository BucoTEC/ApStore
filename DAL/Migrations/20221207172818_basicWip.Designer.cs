// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221207172818_basicWip")]
    partial class basicWip
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AppUserRoleId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02174cf0-9412-4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            AppUserRoleId = 2,
                            ConcurrencyStamp = "bccf27c4-6634-48e1-a054-596837a5f7c9",
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1564),
                            DeletedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1567),
                            Email = "adnan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Adnan",
                            IsActive = true,
                            LastName = "Bucalovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADNAN@GMAIL.COM",
                            NormalizedUserName = "ADNAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOCyDCAhvHMDIl3zDJpQ9P89rBntvcymdq9NagtjeVtwAVMwcd0tiZ8i2INiWoHDWg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "32c49d85-76e9-4cfd-a8f6-7f012cd444ee",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1565),
                            UserName = "adnan@gmail.com"
                        },
                        new
                        {
                            Id = "341743f0-asd2-42de-afbf-59kmkkmk72cf6",
                            AccessFailedCount = 0,
                            AppUserRoleId = 1,
                            ConcurrencyStamp = "fb9ea712-6f53-4c06-9bef-e96b7ae8ee37",
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 425, DateTimeKind.Local).AddTicks(7879),
                            DeletedAt = new DateTime(2022, 12, 7, 18, 28, 18, 425, DateTimeKind.Local).AddTicks(7883),
                            Email = "advan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Advan",
                            IsActive = true,
                            LastName = "Bucalovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADVAN@GMAIL.COM",
                            NormalizedUserName = "ADVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOfsmL6qay4uM/hrfvdLMbohbX7IxkB7gZwkfirB49LiZ82jL9BXEPVjQZRB32m4dA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4dd8ff7c-f940-41e6-a047-031c629fd487",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 425, DateTimeKind.Local).AddTicks(7881),
                            UserName = "advan@gmail.com"
                        });
                });

            modelBuilder.Entity("DAL.Entities.AppUserRole", b =>
                {
                    b.Property<int>("AppUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserRoleId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppUserRoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            AppUserRoleId = 1,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1188),
                            Name = "Customer"
                        },
                        new
                        {
                            AppUserRoleId = 2,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1236),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CartItemId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            CartItemId = 1,
                            AppUserId = "341743f0-asd2-42de-afbf-59kmkkmk72cf6",
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 427, DateTimeKind.Local).AddTicks(5709),
                            IsSelected = true,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            CartItemId = 2,
                            AppUserId = "341743f0-asd2-42de-afbf-59kmkkmk72cf6",
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 427, DateTimeKind.Local).AddTicks(5716),
                            IsSelected = false,
                            ProductId = 2,
                            Quantity = 4
                        },
                        new
                        {
                            CartItemId = 3,
                            AppUserId = "341743f0-asd2-42de-afbf-59kmkkmk72cf6",
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 427, DateTimeKind.Local).AddTicks(5718),
                            IsSelected = true,
                            ProductId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            CartItemId = 4,
                            AppUserId = "341743f0-asd2-42de-afbf-59kmkkmk72cf6",
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 427, DateTimeKind.Local).AddTicks(5720),
                            IsSelected = false,
                            ProductId = 4,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1352),
                            Name = "Single-Vision",
                            ParentId = 0
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1355),
                            Name = "Bifocals",
                            ParentId = 0
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1357),
                            Name = "Trifocals",
                            ParentId = 0
                        },
                        new
                        {
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1358),
                            Name = "Progressives",
                            ParentId = 0
                        });
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DAL.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("DAL.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("AvailableAmount")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AvailableAmount = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1407),
                            Description = "Glasses one description",
                            Name = "Glasses 1",
                            Price = 60m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 2,
                            AvailableAmount = 3,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1430),
                            Description = "Glasses one description",
                            Name = "Glasses 2",
                            Price = 88m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 3,
                            AvailableAmount = 4,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1432),
                            Description = "Glasses one description",
                            Name = "Glasses 3",
                            Price = 184m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 4,
                            AvailableAmount = 5,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1435),
                            Description = "Glasses one description",
                            Name = "Glasses 4",
                            Price = 120m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 5,
                            AvailableAmount = 6,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1437),
                            Description = "Glasses one description",
                            Name = "Glasses 5",
                            Price = 125m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 6,
                            AvailableAmount = 7,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1468),
                            Description = "Glasses one description",
                            Name = "Glasses 6",
                            Price = 122m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 7,
                            AvailableAmount = 8,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1471),
                            Description = "Glasses one description",
                            Name = "Glasses 7",
                            Price = 54m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 8,
                            AvailableAmount = 9,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1474),
                            Description = "Glasses one description",
                            Name = "Glasses 8",
                            Price = 247m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 9,
                            AvailableAmount = 10,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1476),
                            Description = "Glasses one description",
                            Name = "Glasses 9",
                            Price = 294m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 10,
                            AvailableAmount = 11,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1479),
                            Description = "Glasses one description",
                            Name = "Glasses 10",
                            Price = 94m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 11,
                            AvailableAmount = 12,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1482),
                            Description = "Glasses one description",
                            Name = "Glasses 11",
                            Price = 274m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 12,
                            AvailableAmount = 13,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1484),
                            Description = "Glasses one description",
                            Name = "Glasses 12",
                            Price = 143m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 13,
                            AvailableAmount = 14,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1487),
                            Description = "Glasses one description",
                            Name = "Glasses 13",
                            Price = 75m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 14,
                            AvailableAmount = 15,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1489),
                            Description = "Glasses one description",
                            Name = "Glasses 14",
                            Price = 66m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 15,
                            AvailableAmount = 16,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1491),
                            Description = "Glasses one description",
                            Name = "Glasses 15",
                            Price = 286m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 16,
                            AvailableAmount = 17,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1493),
                            Description = "Glasses one description",
                            Name = "Glasses 16",
                            Price = 292m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 17,
                            AvailableAmount = 18,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1496),
                            Description = "Glasses one description",
                            Name = "Glasses 17",
                            Price = 106m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 18,
                            AvailableAmount = 19,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1499),
                            Description = "Glasses one description",
                            Name = "Glasses 18",
                            Price = 60m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 19,
                            AvailableAmount = 20,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1502),
                            Description = "Glasses one description",
                            Name = "Glasses 19",
                            Price = 296m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 20,
                            AvailableAmount = 21,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1504),
                            Description = "Glasses one description",
                            Name = "Glasses 20",
                            Price = 265m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 21,
                            AvailableAmount = 22,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1506),
                            Description = "Glasses one description",
                            Name = "Glasses 21",
                            Price = 139m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 22,
                            AvailableAmount = 23,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1508),
                            Description = "Glasses one description",
                            Name = "Glasses 22",
                            Price = 199m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 23,
                            AvailableAmount = 24,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1510),
                            Description = "Glasses one description",
                            Name = "Glasses 23",
                            Price = 29m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 24,
                            AvailableAmount = 25,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1512),
                            Description = "Glasses one description",
                            Name = "Glasses 24",
                            Price = 197m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 25,
                            AvailableAmount = 26,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1515),
                            Description = "Glasses one description",
                            Name = "Glasses 25",
                            Price = 118m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 26,
                            AvailableAmount = 27,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1517),
                            Description = "Glasses one description",
                            Name = "Glasses 26",
                            Price = 173m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 27,
                            AvailableAmount = 28,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1519),
                            Description = "Glasses one description",
                            Name = "Glasses 27",
                            Price = 98m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 28,
                            AvailableAmount = 29,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1521),
                            Description = "Glasses one description",
                            Name = "Glasses 28",
                            Price = 36m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 29,
                            AvailableAmount = 30,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 7, 18, 28, 18, 424, DateTimeKind.Local).AddTicks(1523),
                            Description = "Glasses one description",
                            Name = "Glasses 29",
                            Price = 59m,
                            ShippingPrice = 9.99m
                        });
                });

            modelBuilder.Entity("DAL.Entities.ProductWip", b =>
                {
                    b.Property<int>("ProductWipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductWipId"), 1L, 1);

                    b.Property<string>("EditorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductWipId");

                    b.ToTable("ProductWips");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.AppUser", b =>
                {
                    b.HasOne("DAL.Entities.AppUserRole", "AppUserRole")
                        .WithMany()
                        .HasForeignKey("AppUserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserRole");
                });

            modelBuilder.Entity("DAL.Entities.CartItem", b =>
                {
                    b.HasOne("DAL.Entities.AppUser", "AppUser")
                        .WithMany("CartItems")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.HasOne("DAL.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DAL.Entities.OrderItem", b =>
                {
                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Entities.Product", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.AppUser", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
