// <auto-generated />
using System;
using DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221206193105_seedUpdateCl")]
    partial class seedUpdateCl
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DAL.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AppUserRoleId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserRoleId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "02174cf0-9412-4cfe-afbf-59f706d72cf6",
                            AccessFailedCount = 0,
                            AppUserRoleId = 2,
                            ConcurrencyStamp = "d5c26496-cd32-4193-a987-8b0056593b63",
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3955),
                            DeletedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3958),
                            Email = "adnan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Adnan",
                            IsActive = true,
                            LastName = "Bucalovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADNAN@GMAIL.COM",
                            NormalizedUserName = "ADNAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENhReEPIUQVGXR26MKkhFFPnkt6yKi3+7ygfzeZhrOw13weDwh8sCedonj4/95pjwQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "796ed5f7-5623-4567-95be-06e744cb04ab",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3956),
                            UserName = "adnan@gmail.com"
                        },
                        new
                        {
                            Id = "341743f0-asd2-42de-afbf-59kmkkmk72cf6",
                            AccessFailedCount = 0,
                            AppUserRoleId = 1,
                            ConcurrencyStamp = "6f44c261-6d9c-4c81-8521-df022b737812",
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 129, DateTimeKind.Local).AddTicks(8776),
                            DeletedAt = new DateTime(2022, 12, 6, 20, 31, 5, 129, DateTimeKind.Local).AddTicks(8786),
                            Email = "advan@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Advan",
                            IsActive = true,
                            LastName = "Bucalovic",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADVAN@GMAIL.COM",
                            NormalizedUserName = "ADVAN@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEMhQvIoQflgAYG7rMl9v64GZFR+f+Dyn4HYuaVyz4eh5eoDn9jwo9aI2j676hB8nGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9a9d7f9d-5781-4535-be19-0d9195845178",
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 129, DateTimeKind.Local).AddTicks(8784),
                            UserName = "advan@gmail.com"
                        });
                });

            modelBuilder.Entity("DAL.Entities.AppUserRole", b =>
                {
                    b.Property<int>("AppUserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppUserRoleId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AppUserRoleId");

                    b.ToTable("AppUserRoles");

                    b.HasData(
                        new
                        {
                            AppUserRoleId = 1,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3604),
                            Name = "Customer"
                        },
                        new
                        {
                            AppUserRoleId = 2,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3646),
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("DAL.Entities.CartItem", b =>
                {
                    b.Property<int>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartItemId"), 1L, 1);

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSelected")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CartItemId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            CartItemId = 1,
                            AppUserId = "341743f0-asd2-42de-afbf-59kmkkmk72cf6",
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 131, DateTimeKind.Local).AddTicks(2855),
                            IsSelected = true,
                            ProductId = 1,
                            Quantity = 2
                        },
                        new
                        {
                            CartItemId = 2,
                            AppUserId = "341743f0-asd2-42de-afbf-59kmkkmk72cf6",
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 131, DateTimeKind.Local).AddTicks(2866),
                            IsSelected = false,
                            ProductId = 2,
                            Quantity = 4
                        },
                        new
                        {
                            CartItemId = 3,
                            AppUserId = "341743f0-asd2-42de-afbf-59kmkkmk72cf6",
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 131, DateTimeKind.Local).AddTicks(2868),
                            IsSelected = true,
                            ProductId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            CartItemId = 4,
                            AppUserId = "341743f0-asd2-42de-afbf-59kmkkmk72cf6",
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 131, DateTimeKind.Local).AddTicks(2869),
                            IsSelected = false,
                            ProductId = 4,
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("DAL.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3770),
                            Name = "Single-Vision",
                            ParentId = 0
                        },
                        new
                        {
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3773),
                            Name = "Bifocals",
                            ParentId = 0
                        },
                        new
                        {
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3774),
                            Name = "Trifocals",
                            ParentId = 0
                        },
                        new
                        {
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3776),
                            Name = "Progressives",
                            ParentId = 0
                        });
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderId");

                    b.HasIndex("AppUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DAL.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderItemId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("DAL.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("AvailableAmount")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("ShippingPrice")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            AvailableAmount = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3825),
                            Description = "Glasses one description",
                            Name = "Glasses 1",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 2,
                            AvailableAmount = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3849),
                            Description = "Glasses one description",
                            Name = "Glasses 2",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 3,
                            AvailableAmount = 4,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3851),
                            Description = "Glasses one description",
                            Name = "Glasses 3",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 4,
                            AvailableAmount = 5,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3853),
                            Description = "Glasses one description",
                            Name = "Glasses 4",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 5,
                            AvailableAmount = 6,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3854),
                            Description = "Glasses one description",
                            Name = "Glasses 5",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 6,
                            AvailableAmount = 7,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3858),
                            Description = "Glasses one description",
                            Name = "Glasses 6",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 7,
                            AvailableAmount = 8,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3860),
                            Description = "Glasses one description",
                            Name = "Glasses 7",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 8,
                            AvailableAmount = 9,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3861),
                            Description = "Glasses one description",
                            Name = "Glasses 8",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 9,
                            AvailableAmount = 10,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3863),
                            Description = "Glasses one description",
                            Name = "Glasses 9",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 10,
                            AvailableAmount = 11,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3865),
                            Description = "Glasses one description",
                            Name = "Glasses 10",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 11,
                            AvailableAmount = 12,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3868),
                            Description = "Glasses one description",
                            Name = "Glasses 11",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 12,
                            AvailableAmount = 13,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3869),
                            Description = "Glasses one description",
                            Name = "Glasses 12",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 13,
                            AvailableAmount = 14,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3871),
                            Description = "Glasses one description",
                            Name = "Glasses 13",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 14,
                            AvailableAmount = 15,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3872),
                            Description = "Glasses one description",
                            Name = "Glasses 14",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 15,
                            AvailableAmount = 16,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3874),
                            Description = "Glasses one description",
                            Name = "Glasses 15",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 16,
                            AvailableAmount = 17,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3875),
                            Description = "Glasses one description",
                            Name = "Glasses 16",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 17,
                            AvailableAmount = 18,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3877),
                            Description = "Glasses one description",
                            Name = "Glasses 17",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 18,
                            AvailableAmount = 19,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3880),
                            Description = "Glasses one description",
                            Name = "Glasses 18",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 19,
                            AvailableAmount = 20,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3881),
                            Description = "Glasses one description",
                            Name = "Glasses 19",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 20,
                            AvailableAmount = 21,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3883),
                            Description = "Glasses one description",
                            Name = "Glasses 20",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 21,
                            AvailableAmount = 22,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3885),
                            Description = "Glasses one description",
                            Name = "Glasses 21",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 22,
                            AvailableAmount = 23,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3886),
                            Description = "Glasses one description",
                            Name = "Glasses 22",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 23,
                            AvailableAmount = 24,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3888),
                            Description = "Glasses one description",
                            Name = "Glasses 23",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 24,
                            AvailableAmount = 25,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3889),
                            Description = "Glasses one description",
                            Name = "Glasses 24",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 25,
                            AvailableAmount = 26,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3891),
                            Description = "Glasses one description",
                            Name = "Glasses 25",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 26,
                            AvailableAmount = 27,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3893),
                            Description = "Glasses one description",
                            Name = "Glasses 26",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 27,
                            AvailableAmount = 28,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3894),
                            Description = "Glasses one description",
                            Name = "Glasses 27",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 28,
                            AvailableAmount = 29,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3896),
                            Description = "Glasses one description",
                            Name = "Glasses 28",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        },
                        new
                        {
                            ProductId = 29,
                            AvailableAmount = 30,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2022, 12, 6, 20, 31, 5, 128, DateTimeKind.Local).AddTicks(3897),
                            Description = "Glasses one description",
                            Name = "Glasses 29",
                            Price = 123.99m,
                            ShippingPrice = 9.99m
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DAL.Entities.AppUser", b =>
                {
                    b.HasOne("DAL.Entities.AppUserRole", "AppUserRole")
                        .WithMany()
                        .HasForeignKey("AppUserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserRole");
                });

            modelBuilder.Entity("DAL.Entities.CartItem", b =>
                {
                    b.HasOne("DAL.Entities.AppUser", "AppUser")
                        .WithMany("CartItems")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.HasOne("DAL.Entities.AppUser", "AppUser")
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DAL.Entities.OrderItem", b =>
                {
                    b.HasOne("DAL.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("DAL.Entities.Product", b =>
                {
                    b.HasOne("DAL.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DAL.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DAL.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DAL.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DAL.Entities.AppUser", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("DAL.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
